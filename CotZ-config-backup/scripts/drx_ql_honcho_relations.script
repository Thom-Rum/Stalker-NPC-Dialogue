--=============================================================
--
-- Important NPC Relations (drx_ql_honcho_relations.script)
--	CoC 1.5b r4 - DoctorX Questlines 2.0
--
--	Created by: DoctorX
--	Last revised: June 08, 2019
--
--=============================================================


-- ////////////////////////////////////////////////////////////////////////////////////////////////
--
-- Global vars
--
--	Created by DoctorX
--	for DoctorX Questlines 2.0
--	April 03, 2019
--
-- ------------------------------------------------------------------------------------------------

-- Map of important npc's:
local honcho_list = {}

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


-- ________________________________________________________________________________________________


-- ////////////////////////////////////////////////////////////////////////////////////////////////
--
-- drx_ql_hr_restore_relations function
--
-- ------------------------------------------------------------------------------------------------
--
--	Description:
--		- Restores important NPC relations
--
--	Usage:
--		drx_ql_hr_restore_relations( )
--
--	Parameters:
--		none
--
--	Return value (type: nil):
--		none
--
-- ------------------------------------------------------------------------------------------------
--	Created by DoctorX
--	for DoctorX Questlines 2.0
--	Last modified April 04, 2019
-- ------------------------------------------------------------------------------------------------

-- Restore important npc relations:
function drx_ql_hr_restore_relations( npc, st )

	-- Get current npc section name:
	local npc_name = npc:section( )
	if ( npc_name == "m_trader" ) then
		npc_name = npc:name( )
	end

	-- Check if current npc is important npc:
	if ( (is_empty( honcho_list )) or (not honcho_list[npc_name]) ) then
		return
	end

	-- Get npc squad object:
	local squad = get_object_squad( npc )
	if ( not squad ) then
		return
	end

 	-- Get squad faction relations to actor:
	local faction_relations = (relation_registry.community_relation( squad:get_squad_community( ), alife( ):actor( ):community( ) ) or 0)
	local faction_goodwill = ((db.actor and relation_registry.community_goodwill( squad:get_squad_community( ), db.actor:id( ) )) or 0)
	local actor_relations = (faction_relations + faction_goodwill)

	-- Align npc relations with actor to npc faction relations with actor:
	squad:set_squad_relation( actor_relations )

	-- Set return value:
	return

end

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


-- ////////////////////////////////////////////////////////////////////////////////////////////////
--
-- drx_ql_hr_fill_honcho_list function
--
-- ------------------------------------------------------------------------------------------------
--
--	Description:
--		- Populates a list of important npc's
--
--	Usage:
--		drx_ql_hr_fill_honcho_list( )
--
--	Parameters:
--		none
--
--	Ini requirements:
--		drx\drx_ql_config.ltx
--			[invulnerable_honchos]
--				- Important NPC's that are immune to damage and ignore combat
--
--	Return value (type: nil):
--		none
--
-- ------------------------------------------------------------------------------------------------
--	Created by DoctorX
--	for DoctorX Questlines 2.0
--	Last modified April 03, 2019
-- ------------------------------------------------------------------------------------------------

-- Fill honcho list:
function drx_ql_hr_fill_honcho_list( )

	-- Get main config file:
	local ini = ini_file( "drx\\drx_ql_config.ltx" )
	if ( not ini ) then
		printf( "DRX QL Error: Unable to fill honcho list, config file not found" )
		return
	end

	-- Populate honcho list:
	honcho_list = alun_utils.collect_section( ini, "invulnerable_honchos", true )

	-- Set return value:
	return

end

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


-- ////////////////////////////////////////////////////////////////////////////////////////////////
--
-- drx_ql_is_honcho function
--
-- ------------------------------------------------------------------------------------------------
--
--	Description:
--		- Determines whether or not an npc is an important npc
--
--	Usage:
--		drx_ql_is_honcho( npc_id )
--
--	Parameters:
--		npc_id (type: npc id)
--			- Id of the npc
--
--	Return value (type: bool):
--		Returns true if the npc is an important npc, false otherwise
--
-- ------------------------------------------------------------------------------------------------
--	Created by DoctorX
--	for DoctorX Questlines 2.0
--	Last modified June 08, 2019
-- ------------------------------------------------------------------------------------------------

-- Determine if npc is important npc:
function drx_ql_is_honcho( npc_id )

	-- Validate input:
	if ( npc_id == nil ) then
		return false
	end

	-- Get npc name:
	local npc_obj = alife( ):object( npc_id )
	if ( not npc_obj ) then
		return false
	end
	local npc_name = npc_obj:section_name( )

	-- Check if current npc is important npc:
	if ( (is_empty( honcho_list )) or (not honcho_list[npc_name]) ) then
		return false
	end

	-- Set return value:
	return true

end

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


-- ________________________________________________________________________________________________


-- ////////////////////////////////////////////////////////////////////////////////////////////////
--
-- Callback functions
--
--	Created by DoctorX
--	for DoctorX Questlines 2.0
--	Last modified April 03, 2019
--
-- ------------------------------------------------------------------------------------------------

-- On game load:
local function drx_ql_hr_on_game_load( npc, st )

	-- Fill important npc list:
	drx_ql_hr_fill_honcho_list( )

end

-- ------------------------------------------------------------------------------------------------

-- On npc update:
local function drx_ql_hr_npc_on_update( npc, st )

	-- Restore important NPC relations:
	drx_ql_hr_restore_relations( npc, st )

end

-- ------------------------------------------------------------------------------------------------

-- On game start:
function on_game_start( )
	RegisterScriptCallback( "on_game_load", drx_ql_hr_on_game_load )
	RegisterScriptCallback( "npc_on_update", drx_ql_hr_npc_on_update )
end

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
